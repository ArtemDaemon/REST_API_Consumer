package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"github.com/joho/godotenv"
	"github.com/rabbitmq/amqp091-go"
)

type Item struct {
	IndicatorId     string `json:"indicator_id"`
	IndicatorValue  string `json:"indicator_value"`
	CountryId       string `json:"country_id"`
	CountryValue    string `json:"country_value"`
	CountryISO3Code string `json:"country_iso3_code"`
	Date            string `json:"date"`
	Value           uint   `json:"value"`
	Unit            string `json:"unit"`
	ObsStatus       string `json:"obs_status"`
	Decimal         uint   `json:"decimal"`
}

const apiURL = "http://localhost:8080/api/last_item"

func getLastItem(token string) {
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	req.Header.Set("Authorization", "Bearer "+token)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Printf("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %s", resp.Status)
		return
	}

	var item Item
	if err := json.NewDecoder(resp.Body).Decode(&item); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v", err)
		return
	}

	fmt.Printf("üì¶ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å:\n%+v\n", item)
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞:", err)
	}

	token := os.Getenv("API_TOKEN")
	if token == "" {
		log.Fatal("API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
	}

	conn, err := amqp091.Dial("amqp://guest:guest@localhost:5672/")
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ: %v", err)
	}
	defer conn.Close()

	ch, err := conn.Channel()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª: %v", err)
	}
	defer ch.Close()

	err = ch.ExchangeDeclare(
		"broadcast", // –∏–º—è exchange
		"fanout",    // —Ç–∏–ø exchange
		true,
		false,
		false,
		false,
		nil,
	)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è–≤–∏—Ç—å exchange: %v", err)
	}

	q, err := ch.QueueDeclare(
		"",
		false,
		true,
		true,
		false,
		nil,
	)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä—è–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å: %v", err)
	}

	err = ch.QueueBind(
		q.Name,
		"",
		"broadcast",
		false,
		nil,
	)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∫ exchange: %v", err)
	}

	msgs, err := ch.Consume(
		q.Name,
		"",
		true,
		false,
		false,
		false,
		nil,
	)
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: %v", err)
	}

	log.Printf("üü¢ –ü–æ–¥–ø–∏—Å—á–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã...\n")
	log.Println("‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ `last` –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ `exit` –¥–ª—è –≤—ã—Ö–æ–¥–∞.")

	// forever := make(chan bool)

	go func() {
		for d := range msgs {
			var item Item
			err := json.Unmarshal(d.Body, &item)
			if err != nil {
				log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: %v", err)
				continue
			}
			fmt.Printf("üì¨ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n%+v\n\n", item)
		}
	}()

	// <-forever

	reader := bufio.NewReader(os.Stdin)
	for {
		fmt.Print(">>> ")
		text, _ := reader.ReadString('\n')
		text = strings.TrimSpace(text)

		switch text {
		case "last":
			getLastItem(token)
		case "exit":
			fmt.Println("üëã –í—ã—Ö–æ–¥.")
			return
		default:
			fmt.Println("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã: last, exit")
		}
	}
}
